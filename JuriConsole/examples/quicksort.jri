#quicksort implementation in juri


fun partition :array start end 
     
    pivot_index = start
    pivot = pivot_index:array

    if start < end repeat
         
        if (start < ?:array)
            if (start:array <= pivot) repeat
                if (start == ?:array-1)
                    break
                start = start + 1
  
        if end:array > pivot repeat
            end = end - 1
         
        if(start < end)
            temp = end:array
            end:array = start:array
            start:array = temp
            
    temp1 = pivot_index:array
    pivot_index:array = end:array
    end:array = temp1
    
    return end

fun quick_sort :array start end 
     
    if (start < end)
       
        p = partition(:array start end )
         
        quick_sort(:array start p-1)
        quick_sort(:array p+1 end )
    1

fun main m
    
    :array = init 1000 as _
        rand(1 10000)
        
    quick_sort(:array 0 (?:array-1))

    iterate :array as n
        print(n)
    
    m 

main(1)
